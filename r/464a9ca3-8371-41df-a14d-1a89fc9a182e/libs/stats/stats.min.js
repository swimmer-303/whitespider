(function() {
  'use strict';

  // stats.js - http://github.com/mrdoob/stats.js
  function Stats() {
    this.dom = document.createElement('div');
    this.dom.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      cursor: pointer;
      opacity: 0.9;
      z-index: 10000;
    `;
    this.dom.addEventListener('click', (e) => {
      e.preventDefault();
      this.showPanel((this.panelIndex + 1) % this.children.length);
    }, false);

    this.panelIndex = 0;
    this.addPanel = (panel) => {
      this.dom.appendChild(panel.dom);
      return panel;
    };
    this.showPanel = (index) => {
      for (let i = 0; i < this.children.length; i++) {
        this.children[i].style.display = i === index ? 'block' : 'none';
      }
      this.panelIndex = index;
    };

    this.begin = () => {
      this.startTime = Date.now();
    };
    this.end = () => {
      const time = Date.now();
      this.update((time - this.startTime), 200);
      return time;
    };
    this.update = () => {
      this.startTime = this.end();
    };

    this.mode = 0;
    this.setMode = (mode) => {
      this.mode = mode;
      this.showPanel(mode);
    };

    this.REVISION = 16;

    this.panels = [
      new Stats.Panel('FPS', '#0ff', '#002'),
      new Stats.Panel('MS', '#0f0', '#020'),
    ];

    if (performance && performance.memory) {
      this.panels.push(new Stats.Panel('MB', '#f08', '#201'));
    }

    this.addPanel(this.panels[this.mode]);
    this.showPanel(this.mode);
  }

  Stats.Panel = function(label, fgColor, bgColor) {
    const canvas = document.createElement('canvas');
    canvas.width = 80;
    canvas.height = 48;
    canvas.style.cssText = `
      width: 80px;
      height: 48px;
    `;
    const ctx = canvas.getContext('2d');
    ctx.font = `bold 9px Helvetica, Arial, sans-serif`;
    ctx.textBaseline = 'top';
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = fgColor;
    ctx.fillText(label, 3, 15);
    ctx.fillRect(51, 15, 32, 32);
    ctx.fillStyle = bgColor;
    ctx.globalAlpha = 0.9;
    ctx.fillRect(51, 15, 32, 32);

    this.dom = canvas;
    this.update = (value, maxValue) => {
      ctx.fillStyle = bgColor;
      ctx.globalAlpha = 1;
      ctx.fillRect(0, 0, canvas.width, 15);
      ctx.fillStyle = fgColor;
      ctx.fillText(`${Math.round(value)} ${label} `, 3, 15);
      ctx.drawImage(
        canvas,
        51, 15, 32, 32,
        51, 15, 32, 32
      );
      ctx.fillRect(83, 15, 5, 32);
      ctx.fillStyle = bgColor;
      ctx.globalAlpha = 0.9;
      ctx.fillRect(83, 15, 5, Math.round((1 - value / maxValue) * 32));
    };
  };

  // Expose the Stats constructor
  window.Stats = Stats;
})();
