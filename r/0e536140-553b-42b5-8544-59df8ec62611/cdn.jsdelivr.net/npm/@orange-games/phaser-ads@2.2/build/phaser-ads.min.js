/*!
 * phaser-ads - version 2.2.7 
 * A Phaser plugin for providing nice ads integration in your phaser.io game
 *
 * OrangeGames
 * Build at 07-08-2018
 * Released under MIT License 
 */

// Helper function for extending classes
function __extends(child, parent) {
    // ...
}

// PhaserAds namespace
var PhaserAds = (function () {
    function PhaserAds() {}

    // AdEvent enumeration
    var AdEvent;
    (function (AdEvent) {
        AdEvent[AdEvent["start"] = 0] = "start";
        AdEvent[AdEvent["firstQuartile"] = 1] = "firstQuartile";
        AdEvent[AdEvent["midPoint"] = 2] = "midPoint";
        AdEvent[AdEvent["thirdQuartile"] = 3] = "thirdQuartile";
        AdEvent[AdEvent["complete"] = 4] = "complete";
    })(AdEvent = PhaserAds.AdEvent || (PhaserAds.AdEvent = {}));

    // AdType enumeration
    var AdType;
    (function (AdType) {
        AdType[AdType["interstitial"] = 0] = "interstitial";
        AdType[AdType["rewarded"] = 1] = "rewarded";
        AdType[AdType["banner"] = 2] = "banner";
        AdType[AdType["video"] = 3] = "video";
    })(AdType = PhaserAds.AdType || (PhaserAds.AdType = {}));

    // AdManager class
    var AdManager = (function (_super) {
        __extends(AdManager, _super);

        function AdManager(game, pluginManager) {
            var _this = _super.call(this, game, pluginManager) || this;

            _this.onContentPaused = new Phaser.Signal();
            _this.onContentResumed = new Phaser.Signal();
            _this.onAdProgression = new Phaser.Signal();
            _this.onAdsDisabled = new Phaser.Signal();
            _this.onAdClicked = new Phaser.Signal();
            _this.onAdRewardGranted = new Phaser.Signal();
            _this.onBannerShown = new Phaser.Signal();
            _this.onBannerHidden = new Phaser.Signal();
            _this.bannerActive = false;
            _this.provider = null;
            _this.wasMuted = false;

            Object.defineProperty(game, "ads", { value: _this });
            return _this;
        }

        // ...

        return AdManager;
    })(Phaser.Plugin);

    // CocoonProvider namespace
    var CocoonProvider;
    (function (CocoonProvider) {
        // AdMob, MoPub, Chartboost, Heyzap enumeration
        var Provider;
        (function (Provider) {
            Provider[Provider.AdMob = 0] = "AdMob";
            Provider[Provider.MoPub = 1] = "MoPub";
            Provider[Provider.Chartboost = 2] = "Chartboost";
            Provider[Provider.Heyzap = 3] = "Heyzap";
        })(Provider = CocoonProvider.Provider || (CocoonProvider.Provider = {}));

        // CocoonAds class
        var CocoonAds = (function () {
            function CocoonAds(game, provider, settings) {
                this.adsEnabled = false;
                this.banner = null;
                this.bannerShowable = false;
                this.interstitial = null;
                this.interstitialShowable = false;
                this.rewarded = null;
                this.rewardedShowable = false;

                if (game.device.cordova || game.device.crosswalk && Cocoon && Cocoon.Ad) {
                    this.adsEnabled = true;
                    switch (provider) {
                        case Provider.AdMob:
                            this.cocoonProvider = Cocoon.Ad.AdMob;
                            break;
                        case Provider.Chartboost:
                            this.cocoonProvider = Cocoon.Ad.Chartboost;
                            break;
                        case Provider.Heyzap:
                            this.cocoonProvider = Cocoon.Ad.Heyzap;
                            break;
                        case Provider.MoPub:
                            this.cocoonProvider = Cocoon.Ad.MoPub;
                            break;
                    }
                    this.cocoonProvider.configure(settings);
                }
            }

            // ...

            return CocoonAds;
        }());

        CocoonProvider.CocoonAds = CocoonAds;
    })(CocoonProvider = PhaserAds.CocoonProvider || (PhaserAds.CocoonProvider = {}));

    // CordovaGameDistribution namespace
    var CordovaGameDistribution = (function () {
        function CordovaGameDistribution(game, appId, userId) {
            this.adsEnabled = false;

            if (game.device.cordova || game.device.crosswalk) {
                this.adsEnabled = true;
                this.setAdListeners();
                cordova.plugins.gdApi.init(
                    [appId, userId],
                    function () {},
                    function () {}
                );
            }
        }

        // ...

        return CordovaGameDistribution;
    }());

    PhaserAds.CordovaGameDistribution = CordovaGameDistribution;

    // HeyzapAdTypes enumeration
    var HeyzapAdTypes;
    (function (HeyzapAdTypes) {
        HeyzapAdTypes[HeyzapAdTypes["Interstitial"] = 0] = "Interstitial";
        HeyzapAdTypes[HeyzapAdTypes["Video"] = 1] = "Video";
        HeyzapAdTypes[HeyzapAdTypes["Rewarded"] = 2] = "Rewarded";
        HeyzapAdTypes[HeyzapAdTypes["Banner"] = 3] = "Banner";
    })(HeyzapAdTypes = PhaserAds.HeyzapAdTypes || (PhaserAds.HeyzapAdTypes = {}));

    // CordovaHeyzap namespace
    var CordovaHeyzap = (function () {
        function CordovaHeyzap(game, appId) {
            this.adsEnabled = true;
            this.areAdsEnabled();
            HeyzapAds.start(appId).then(
                function () {},
                function (a) {
                    this.adsEnabled = false;
                }
            );
        }

        // ...

        return CordovaHeyzap;
    }());

    PhaserAds.CordovaHeyzap = CordovaHeyzap;

    // GameDistributionAdType enumeration
    var GameDistributionAdType;
    (function (GameDistributionAdType) {
        GameDistributionAdType[GameDistributionAdType["preroll"] = 0] = "preroll";
        GameDistributionAdType[GameDistributionAdType["midroll"] = 1] = "midroll";
    })(GameDistributionAdType = PhaserAds.GameDistributionAdType || (PhaserAds.GameDistributionAdType = {}));

    // GameDistributionAds namespace
    var GameDistributionAds = (function () {
        function GameDistributionAds(game, appId, userId) {
            this.adsEnabled = true;
            GD_OPTIONS = {
                gameId: appId,
                userId: userId,
                advertisementSettings: { autoplay: false },
                onEvent: function (a) {
                    // ...
                },
            };

            function (a, b, c) {
                // ...
            }

            function (a, b, c) {
                // ...
            }
        }

        // ...

        return GameDistributionAds;
    }());

    PhaserAds.GameDistributionAds = GameDistributionAds;

    // Ima3 namespace
    var Ima3 = (function () {
        function Ima3(game, adTagUrl, parent) {
            this.adsManager = null;
            this.googleEnabled = false;
            this.adsEnabled = true;
            this.adTagUrl = "";
            this.adRequested = false;
            this.adManager = null;
            this.resizeListener = null;

            this.areAdsEnabled();

            if (typeof google !== "undefined") {
                this.googleEnabled = true;
                this.gameContent =
                    "string" === typeof parent
                        ? document.getElementById(parent)
                        : parent;
                // ...
            }
        }

        // ...

        return Ima3;
    }());

    PhaserAds.Ima3 = Ima3;

    return PhaserAds;
})();
